"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[820],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,g=d["".concat(i,".").concat(u)]||d[u]||p[u]||o;return n?a.createElement(g,m(m({ref:t},c),{},{components:n})):a.createElement(g,m({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,m=new Array(o);m[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:r,m[1]=s;for(var l=2;l<o;l++)m[l]=n[l];return a.createElement.apply(null,m)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>m,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},m="Creating commands in a bot",s={unversionedId:"getting-started/add-commands",id:"getting-started/add-commands",title:"Creating commands in a bot",description:"Commands are the main way a user interacts with a bot. Each command represents a specific action that can be performed using the bot. For example, getting the current weather, translating text, or playing a game.",source:"@site/docs/getting-started/add-commands.md",sourceDirName:"getting-started",slug:"/getting-started/add-commands",permalink:"/evogram/docs/getting-started/add-commands",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/getting-started/add-commands.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/evogram/docs/intro"},next:{title:"Obtaining a Bot API Token",permalink:"/evogram/docs/getting-started/get-api-token"}},i={},l=[{value:"Step 1: Create your first command",id:"step-1-create-your-first-command",level:3},{value:"Step 2: Handling command parameters",id:"step-2-handling-command-parameters",level:3},{value:"Step 3: Registering commands",id:"step-3-registering-commands",level:3},{value:"Step 4: Calling a command",id:"step-4-calling-a-command",level:3}],c={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-commands-in-a-bot"},"Creating commands in a bot"),(0,r.kt)("p",null,"Commands are the main way a user interacts with a bot. Each command represents a specific action that can be performed using the bot. For example, getting the current weather, translating text, or playing a game."),(0,r.kt)("h3",{id:"step-1-create-your-first-command"},"Step 1: Create your first command"),(0,r.kt)("p",null,"Let's create a command ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloCommand"),' that simply sends the user the message "Hello, world!".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Command, UserMessageContext } from "evogram";\n\n@CommandHandler("hello")\nclass HelloCommand extends Command {\n    public async execute(message: UserMessageContext){\n        message.reply("Hello, world!");\n    }\n}\n')),(0,r.kt)("h3",{id:"step-2-handling-command-parameters"},"Step 2: Handling command parameters"),(0,r.kt)("p",null,"Often commands require additional parameters to perform a specific action. For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"TranslateCommand")," command may need to specify the language to translate the text to. Let's modify our ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloCommand")," command so that it can accept parameters from the user's message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Command, UserMessageContext } from "evogram";\n\n@CommandHandler({ \n    name: "hello", \n    args: {\n        method: "fulltext",\n        value: ["name"]\n    }\n})\nexport class HelloCommand extends Command {\n    public async execute(message: UserMessageContext, data: ICommandExecuteData): Promise<void> {\n        message.reply(`Hello, ${data.args.name}!`);\n    }\n}\n')),(0,r.kt)("p",null,"In this example, we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"@CommandHandler"),' decorator to define the command name and its parameters. We set the command name as "hello", and the parameters as the user\'s name (',(0,r.kt)("inlineCode",{parentName:"p"},"name"),") passed as text after the command. Then, we modified the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," method to use the data from the command received from the user. In this case, we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," parameter to access the values of the command parameters. After that, we pass the user's name in the response message to the user using the ",(0,r.kt)("inlineCode",{parentName:"p"},"message.reply")," method."),(0,r.kt)("h3",{id:"step-3-registering-commands"},"Step 3: Registering commands"),(0,r.kt)("p",null,"Now that we have a command, we need to register it with the bot. To do this, simply import the class with our command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Import the main Evogram class\nimport { Evogram } from \'evogram\';\n// Import the command we just created\nimport "./commands/hello.ts"\n// Authorize the bot using API token\nconst client = new Evogram("YOUR_TOKEN");\n// Launch the bot using LongPoll\nclient.updates.polling.start();\n')),(0,r.kt)("h3",{id:"step-4-calling-a-command"},"Step 4: Calling a command"),(0,r.kt)("p",null,"Now users can call our command by sending messages to the bot. Let's see how it works."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"> /hello Jane\nBot: Hello, Jane!\n")))}p.isMDXComponent=!0}}]);