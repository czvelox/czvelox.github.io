"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8415],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=a.createContext({}),d=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(m.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=d(n),u=o,h=l["".concat(m,".").concat(u)]||l[u]||p[u]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[l]="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const r={},s="Method execute",i={unversionedId:"modules/commands/command-methods/execute",id:"modules/commands/command-methods/execute",title:"Method execute",description:"The execute method is mandatory to implement in any class that inherits the abstract Command class. This method takes two arguments: message and data, which are objects. The message object contains data related to the user's message, such as text, sender ID, and so on. The data object is an optional parameter and is used to pass additional data to the command.",source:"@site/docs/modules/commands/command-methods/execute.md",sourceDirName:"modules/commands/command-methods",slug:"/modules/commands/command-methods/execute",permalink:"/evogram/docs/modules/commands/command-methods/execute",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/modules/commands/command-methods/execute.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Command Methods",permalink:"/evogram/docs/modules/commands/command-methods/"},next:{title:"Method isExecutable",permalink:"/evogram/docs/modules/commands/command-methods/isExecutable"}},m={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example Usage",id:"example-usage",level:2}],c={toc:d},l="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"method-execute"},"Method ",(0,o.kt)("inlineCode",{parentName:"h1"},"execute")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method is mandatory to implement in any class that inherits the abstract ",(0,o.kt)("inlineCode",{parentName:"p"},"Command")," class. This method takes two arguments: ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", which are objects. The ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," object contains data related to the user's message, such as text, sender ID, and so on. The ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," object is an optional parameter and is used to pass additional data to the command."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method should contain the logic for processing user command input and creating a response. It is called when the command has been identified and is ready to be executed. In general, the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method is the key method in handling user commands and generating corresponding responses."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If an error occurs during command execution, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"onError")," method to handle it.")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message")," - The ",(0,o.kt)("inlineCode",{parentName:"li"},"UserMessageContext")," object containing information about the incoming user message, such as message text, chat ID, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"data")," - The ",(0,o.kt)("inlineCode",{parentName:"li"},"ICommandExecuteData")," object containing additional data required to execute the command.")),(0,o.kt)("h2",{id:"example-usage"},"Example Usage"),(0,o.kt)("p",null,"The final code for the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute"),' method depends on the specific project requirements and applied architecture, but as an example, consider processing a simple "greeting" command.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Command, UserMessageContext, CommandHandler } from "evogram";\n\n@CommandHandler("start")\nclass GreetingCommand extends Command {\n    public execute(message: UserMessageContext) {\n        const greetingText = `Hello, ${message.user.fullname}! Nice to meet you.`;\n        return message.reply(greetingText);\n    }\n}\n')),(0,o.kt)("p",null,"We import classes ",(0,o.kt)("inlineCode",{parentName:"p"},"Command"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"UserMessageContext"),", and decorator ",(0,o.kt)("inlineCode",{parentName:"p"},"CommandHandler")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"evogram")," module, which indicates that this class is a command handler. "),(0,o.kt)("p",null,"Then we create the ",(0,o.kt)("inlineCode",{parentName:"p"},"GreetingCommand")," class, which is inherited from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Command")," class. The ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method takes the",(0,o.kt)("inlineCode",{parentName:"p"}," UserMessageContext")," object, which contains information about the user's message. When this command is called, a greeting message will be sent to the user containing their name."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"CommandHandler"),' decorator indicates that this class is the handler for the "start" command. Thus, when a user receives the "/start" command, the ',(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method of this class will be automatically called."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"In this example, we do not handle possible errors, which can lead to application crashes in case of their occurrence. In a real project, appropriate error handling must be provided.")))}p.isMDXComponent=!0}}]);