"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7913],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,g=c["".concat(i,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[c]="string"==typeof e?e:r,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},s="Update Handling",p={unversionedId:"updates/updates-handler",id:"updates/updates-handler",title:"Update Handling",description:"The Updates module is a powerful tool for processing and responding to Telegram bot updates. It makes it easy to register handlers for different types of updates and contexts, as well as send text messages and other actions in response to received updates.",source:"@site/docs/updates/updates-handler.md",sourceDirName:"updates",slug:"/updates/updates-handler",permalink:"/evogram/docs/updates/updates-handler",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/updates/updates-handler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Updates",permalink:"/evogram/docs/updates/"},next:{title:"Update List",permalink:"/evogram/docs/updates/updates-list"}},i={},l=[{value:"Registering Handlers",id:"registering-handlers",level:2},{value:"Context Objects",id:"context-objects",level:2},{value:"Starting Update Processing",id:"starting-update-processing",level:2},{value:"Usage Example",id:"usage-example",level:2}],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"update-handling"},"Update Handling"),(0,r.kt)("p",null,"The Updates module is a powerful tool for processing and responding to Telegram bot updates. It makes it easy to register handlers for different types of updates and contexts, as well as send text messages and other actions in response to received updates."),(0,r.kt)("h2",{id:"registering-handlers"},"Registering Handlers"),(0,r.kt)("p",null,"To register handlers, you need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"on()")," method, which has many overloads based on different types of updates and corresponding contexts. For example, to register a message update handler:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'client.updates.on("message", (message) => {\n    // your message update handling code\n});\n')),(0,r.kt)("p",null,"Handlers are added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"handlers")," object of an ",(0,r.kt)("inlineCode",{parentName:"p"},"Updates")," instance. Multiple handlers can be registered for each type of update."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In the example, ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," is an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Evogram")," class.")),(0,r.kt)("h2",{id:"context-objects"},"Context Objects"),(0,r.kt)("p",null,"A context is an object that contains information about the received update and its sender. Depending on the type of update, the appropriate context is used. A context is an instance of a class, the subclass of which is the context for a specific type of update."),(0,r.kt)("p",null,"For example, to handle a message update, you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageContext"),". It contains information about the message text, sender and recipient, as well as methods for responding to the message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"client.updates.on('message', (message) => {\n  message.reply('Hello, I am a bot!');\n});\n")),(0,r.kt)("h2",{id:"starting-update-processing"},"Starting Update Processing"),(0,r.kt)("p",null,"To start the process of updating handling, you need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," method on the transport object (Polling or Webhook). The ",(0,r.kt)("inlineCode",{parentName:"p"},"polling.start()")," method allows you to start the process of regular polling of the Telegram bot's servers via an API, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"webhook.start()")," method sets up a webhook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"client.updates.polling.start();\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," method must be called after registering all update handlers.")),(0,r.kt)("h2",{id:"usage-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Evogram } from \'evogram\';\nconst client = new Evogram("YOUR_BOT_TOKEN");\n\nclient.updates.on("message", (message) => {\n    message.reply("Hello!")\n})\n\nclient.updates.polling.start();\n')),(0,r.kt)("p",null,"The code above is an example that allows your Telegram bot to respond to all received messages with the text ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello!"),"."))}u.isMDXComponent=!0}}]);