"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4140],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),l=d(n),p=a,h=l["".concat(c,".").concat(p)]||l[p]||u[p]||r;return n?o.createElement(h,s(s({ref:t},i),{},{components:n})):o.createElement(h,s({ref:t},i))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=p;var m={};for(var c in t)hasOwnProperty.call(t,c)&&(m[c]=t[c]);m.originalType=e,m[l]="string"==typeof e?e:a,s[1]=m;for(var d=2;d<r;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>m,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const r={},s="Command Methods",m={unversionedId:"modules/commands/command-methods/command-methods",id:"modules/commands/command-methods/command-methods",title:"Command Methods",description:"The Command class is the base class for creating bot commands. It contains several useful methods that can be used in child classes. Here's a brief description of each of these methods:",source:"@site/docs/modules/commands/command-methods/command-methods.md",sourceDirName:"modules/commands/command-methods",slug:"/modules/commands/command-methods/",permalink:"/evogram/docs/modules/commands/command-methods/",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/modules/commands/command-methods/command-methods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Class CommandManager",permalink:"/evogram/docs/modules/commands/command-manager"},next:{title:"Method execute",permalink:"/evogram/docs/modules/commands/command-methods/execute"}},c={},d=[],i={toc:d},l="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,o.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"command-methods"},"Command Methods"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Command")," class is the base class for creating bot commands. It contains several useful methods that can be used in child classes. Here's a brief description of each of these methods:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"isExecutable(message: UserMessageContext): boolean"),": A method that checks if the command can be executed based on the incoming message. Returns true if the command can be executed and false otherwise.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"execute(message: UserMessageContext, data: ICommandExecuteData)"),": An abstract method that must be implemented in child classes. This method performs actions related to executing the command. It takes the incoming message and data as an ",(0,a.kt)("inlineCode",{parentName:"p"},"ICommandExecuteData")," object.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"onError(message: UserMessageContext, error: any)"),": A method that is called when an error occurs while executing the command. By default, it simply throws an error, but you can override it in child classes to handle the error in some other way."))))}u.isMDXComponent=!0}}]);