"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[22],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return n?a.createElement(g,m(m({ref:t},c),{},{components:n})):a.createElement(g,m({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,m=new Array(o);m[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,m[1]=i;for(var l=2;l<o;l++)m[l]=n[l];return a.createElement.apply(null,m)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>m,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},m="Class CommandManager",i={unversionedId:"modules/commands/command-manager",id:"modules/commands/command-manager",title:"Class CommandManager",description:"The CommandManager class is responsible for managing commands and setting bot commands for the client. It is available in the Evogram instance object as commands.",source:"@site/docs/modules/commands/command-manager.md",sourceDirName:"modules/commands",slug:"/modules/commands/command-manager",permalink:"/evogram/docs/modules/commands/command-manager",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/modules/commands/command-manager.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Commands Module",permalink:"/evogram/docs/modules/commands/"},next:{title:"Command Methods",permalink:"/evogram/docs/modules/commands/command-methods/"}},s={},l=[{value:"Constructor",id:"constructor",level:3},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3}],c={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"class-commandmanager"},"Class ",(0,r.kt)("inlineCode",{parentName:"h1"},"CommandManager")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandManager")," class is responsible for managing commands and setting bot commands for the client. It is available in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Evogram")," instance object as ",(0,r.kt)("inlineCode",{parentName:"p"},"commands"),"."),(0,r.kt)("h3",{id:"constructor"},"Constructor"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"client"),": An instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Evogram")," class.")),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commands"),": A static property that contains an array of all registered ",(0,r.kt)("inlineCode",{parentName:"li"},"Command")," objects.")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setBotCommands()"),": A method that sets bot commands for the client using the ",(0,r.kt)("strong",{parentName:"p"},"setMyCommands")," API method from the Telegram Bot API based on descriptions provided by registered ",(0,r.kt)("inlineCode",{parentName:"p"},"Command")," objects. It is used automatically when adding a command.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getCommand(message: UserMessageContext)"),": A static method that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"UserMessageContext")," object and returns the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"Command")," object if it exists in the ",(0,r.kt)("inlineCode",{parentName:"p"},"commands")," array. Otherwise, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."))))}p.isMDXComponent=!0}}]);