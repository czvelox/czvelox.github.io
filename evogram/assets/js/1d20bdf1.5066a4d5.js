"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4437],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),l=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(i.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),u=r,g=d["".concat(i,".").concat(u)]||d[u]||p[u]||o;return t?a.createElement(g,m(m({ref:n},c),{},{components:t})):a.createElement(g,m({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,m=new Array(o);m[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[d]="string"==typeof e?e:r,m[1]=s;for(var l=2;l<o;l++)m[l]=t[l];return a.createElement.apply(null,m)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9164:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>m,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={},m="Command Configuration",s={unversionedId:"modules/commands/command-setup/command-setup",id:"modules/commands/command-setup/command-setup",title:"Command Configuration",description:"The CommandHandler decorator is used to declare a command, add it to the command handler and specify its parameters. It uses overloading, allowing you to pass a string as an argument that will be the name of the command for activation or an object with parameters.",source:"@site/docs/modules/commands/command-setup/command-setup.md",sourceDirName:"modules/commands/command-setup",slug:"/modules/commands/command-setup/",permalink:"/evogram/docs/modules/commands/command-setup/",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/modules/commands/command-setup/command-setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"onError",permalink:"/evogram/docs/modules/commands/command-methods/onError"},next:{title:"Setting arguments in command",permalink:"/evogram/docs/modules/commands/command-setup/command-arguments"}},i={},l=[{value:"Simple Configuration",id:"simple-configuration",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2}],c={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"command-configuration"},"Command Configuration"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandHandler")," decorator is used to declare a command, add it to the command handler and specify its parameters. It uses overloading, allowing you to pass a string as an argument that will be the name of the command for activation or an object with parameters."),(0,r.kt)("h2",{id:"simple-configuration"},"Simple Configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@CommandHandler("example")\nclass ExampleCommand extends Command {}\n')),(0,r.kt)("p",null,"This example is the simplest - we created the ",(0,r.kt)("inlineCode",{parentName:"p"},"example")," command. Now, the bot will refer to this class if the user writes ",(0,r.kt)("inlineCode",{parentName:"p"},"/example"),"."),(0,r.kt)("h2",{id:"advanced-configuration"},"Advanced Configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@CommandHandler({\n    name: "example",\n    args: {\n        method: "stdin",\n        value: [\n            ["argument1", { question: "Enter your first argument:" }],\n            ["argument2", { question: "Enter your second argument:" }]\n        ]\n    },\n    description: [\n        { text: "It\'s a test command", language: "en" },\n        { text: "\u042d\u0442\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430", language: "ru" },\n    ]\n})\nclass ExampleCommand extends Command {}\n')),(0,r.kt)("p",null,"Here are all the possible command settings. The command, like in the previous example, responds to ",(0,r.kt)("inlineCode",{parentName:"p"},"/example"),", but with additional functions."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Interface Parameters Accepted by the Decorator"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ICommandParams {\n    // The name of the command the bot will react to\n    name: string;\n    // Arguments required for executing the command\n    args?: ICommandArguments;\n    // You can specify a description of the command in different languages, which will be sent to Telegram for installation on the list of commands\n    description?: ICommandDescription[];\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ICommandDescription {\n    // A command description (1-256 characters)\n    text: string;\n    // Two-letter ISO 639-1 language code. If empty, the command will apply to all users in the area for whom there are no special commands.\n    language?: string;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type ICommandArgumentType = "parameterized" | "space" | "stdin" | "fulltext";\n\ninterface ICommandArguments {\n    /**\n     * Specifies how arguments will be passed to the command\n     * \n     * @param parameterized - Command arguments are passed as --key=value\n     * @example\n     *  User: /command --param1=value --param2=value\n     * \n     * @param space - Command arguments are passed as values separated by spaces\n     * @example\n     *  User: /command value1 value2\n     * \n     * @param stdin - Command arguments are requested after the command is called, they are accepted as separate messages which are requested by the bot\n     * @example\n     *  User: /command\n     *  Bot: What value do you want to specify?\n     *  User: value\n     * \n     * @param fulltext - Accepts only one argument and returns the entire text of the message\n     * @example\n     *  User: /command here\'s a lot of text that is fully transmitted as one argument\n     */\n    method: ICommandArgumentType | ICommandArgumentType[];\n    /**\n     * @type {string[]} An array consisting of the enumeration of argument names to get\n     * @type {[string, { question?: string }][]} An array of arrays, where the argument name is passed first, then its additional parameters\n     * \n     * @param question The message text to request an argument. If the text is not specified, the standard message will be sent\n     */\n    value: string[] | [string, {\n        question?: string\n    }][];\n}\n')))))}p.isMDXComponent=!0}}]);