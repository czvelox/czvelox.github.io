"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,d=p["".concat(l,".").concat(g)]||p[g]||m[g]||i;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3649:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a="First Evogram Bot",s={unversionedId:"getting-started/your-first-bot",id:"getting-started/your-first-bot",title:"First Evogram Bot",description:"Now, we will create our first bot on Evogram. It will be as simple as possible for understanding and won't represent anything serious.",source:"@site/docs/getting-started/your-first-bot.md",sourceDirName:"getting-started",slug:"/getting-started/your-first-bot",permalink:"/evogram/docs/getting-started/your-first-bot",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/getting-started/your-first-bot.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Obtaining Command Arguments",permalink:"/evogram/docs/getting-started/get-arguments-command"},next:{title:"Commands Module",permalink:"/evogram/docs/modules/commands/"}},l={},c=[{value:"Project Setup",id:"project-setup",level:2},{value:"Writing the code",id:"writing-the-code",level:2},{value:"Running the bot",id:"running-the-bot",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"first-evogram-bot"},"First Evogram Bot"),(0,o.kt)("p",null,"Now, we will create our first bot on Evogram. It will be as simple as possible for understanding and won't represent anything serious."),(0,o.kt)("h2",{id:"project-setup"},"Project Setup"),(0,o.kt)("p",null,"To get started, create a project directory in which we will develop the bot.\nAfter that, open the terminal path to the directory and install Evogram with NPM:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install evogram\n")),(0,o.kt)("p",null,"Now, create an index.ts file, this will be the main file of the bot. In it, it is recommended to run the bot, import commands, handlers. It is not recommended to write everything in one file, but we will come to this later."),(0,o.kt)("h2",{id:"writing-the-code"},"Writing the code"),(0,o.kt)("p",null,"In the created file, write the code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Import the main Evogram class\nimport { Evogram } from \'evogram\';\n// Authorize the bot using the API token\nconst client = new Evogram("YOUR_TOKEN");\n\n// Listening to events about new messages in the chat\nclient.updates.on("message", (message) => {\n    // Output the message to the console\n    console.log(message);\n})\n\n// Starting the bot with LongPoll\nclient.updates.polling.start();\n')),(0,o.kt)("p",null,"This code launches the bot and handles the new message event. When receiving a message, it will go to the console, where we can see its contents."),(0,o.kt)("h2",{id:"running-the-bot"},"Running the bot"),(0,o.kt)("p",null,"To start the bot, enter the following command in the terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx ts-node index.ts\n")),(0,o.kt)("p",null,"Here, we use ts-node for automatic building and running TypeScript.\nIf everything went well, when you send a message to your bot in the chat, it will appear in the console."))}m.isMDXComponent=!0}}]);