"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/evogram/docs/intro","docId":"intro"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating commands in a bot","href":"/evogram/docs/getting-started/add-commands","docId":"getting-started/add-commands"},{"type":"link","label":"Obtaining a Bot API Token","href":"/evogram/docs/getting-started/get-api-token","docId":"getting-started/get-api-token"},{"type":"link","label":"Obtaining Command Arguments","href":"/evogram/docs/getting-started/get-arguments-command","docId":"getting-started/get-arguments-command"},{"type":"link","label":"First Evogram Bot","href":"/evogram/docs/getting-started/your-first-bot","docId":"getting-started/your-first-bot"}]},{"type":"category","label":"Modules","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Commands Module","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Class CommandManager","href":"/evogram/docs/modules/commands/command-manager","docId":"modules/commands/command-manager"},{"type":"category","label":"Command Methods","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Method execute","href":"/evogram/docs/modules/commands/command-methods/execute","docId":"modules/commands/command-methods/execute"},{"type":"link","label":"Method isExecutable","href":"/evogram/docs/modules/commands/command-methods/isExecutable","docId":"modules/commands/command-methods/isExecutable"},{"type":"link","label":"onError","href":"/evogram/docs/modules/commands/command-methods/onError","docId":"modules/commands/command-methods/onError"}],"href":"/evogram/docs/modules/commands/command-methods/"},{"type":"category","label":"Command Configuration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Setting arguments in command","href":"/evogram/docs/modules/commands/command-setup/command-arguments","docId":"modules/commands/command-setup/command-arguments"},{"type":"link","label":"Command Description Installation","href":"/evogram/docs/modules/commands/command-setup/command-description","docId":"modules/commands/command-setup/command-description"}],"href":"/evogram/docs/modules/commands/command-setup/"}],"href":"/evogram/docs/modules/commands/"},{"type":"link","label":"Questions Module","href":"/evogram/docs/modules/questions/","docId":"modules/questions/questions"}]},{"type":"category","label":"Updates","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Update Handling","href":"/evogram/docs/updates/updates-handler","docId":"updates/updates-handler"},{"type":"link","label":"Update List","href":"/evogram/docs/updates/updates-list","docId":"updates/updates-list"}],"href":"/evogram/docs/updates/"}]},"docs":{"getting-started/add-commands":{"id":"getting-started/add-commands","title":"Creating commands in a bot","description":"Commands are the main way a user interacts with a bot. Each command represents a specific action that can be performed using the bot. For example, getting the current weather, translating text, or playing a game.","sidebar":"tutorialSidebar"},"getting-started/get-api-token":{"id":"getting-started/get-api-token","title":"Obtaining a Bot API Token","description":"The most important thing is to create your bot. This can be done in the Telegram bot called BotFather. After talking to him, you will receive an API token for further work.","sidebar":"tutorialSidebar"},"getting-started/get-arguments-command":{"id":"getting-started/get-arguments-command","title":"Obtaining Command Arguments","description":"Suppose, we need to find out how old the user is. Requesting arguments is available right out of the box in the module, all you have to do is specify which arguments are required.","sidebar":"tutorialSidebar"},"getting-started/your-first-bot":{"id":"getting-started/your-first-bot","title":"First Evogram Bot","description":"Now, we will create our first bot on Evogram. It will be as simple as possible for understanding and won\'t represent anything serious.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to the documentation for Evogram, a TypeScript framework for creating Telegram bots. This framework simplifies the process of creating bots in Telegram by providing a convenient and easy-to-use API for working with the Telegram Bot API.","sidebar":"tutorialSidebar"},"modules/commands/command-manager":{"id":"modules/commands/command-manager","title":"Class CommandManager","description":"The CommandManager class is responsible for managing commands and setting bot commands for the client. It is available in the Evogram instance object as commands.","sidebar":"tutorialSidebar"},"modules/commands/command-methods/command-methods":{"id":"modules/commands/command-methods/command-methods","title":"Command Methods","description":"The Command class is the base class for creating bot commands. It contains several useful methods that can be used in child classes. Here\'s a brief description of each of these methods:","sidebar":"tutorialSidebar"},"modules/commands/command-methods/execute":{"id":"modules/commands/command-methods/execute","title":"Method execute","description":"The execute method is mandatory to implement in any class that inherits the abstract Command class. This method takes two arguments: message and data, which are objects. The message object contains data related to the user\'s message, such as text, sender ID, and so on. The data object is an optional parameter and is used to pass additional data to the command.","sidebar":"tutorialSidebar"},"modules/commands/command-methods/isExecutable":{"id":"modules/commands/command-methods/isExecutable","title":"Method isExecutable","description":"Method isExecutable is a method in the Command class that checks whether the given command can be executed based on the incoming message. This method takes one argument - a user message object.","sidebar":"tutorialSidebar"},"modules/commands/command-methods/onError":{"id":"modules/commands/command-methods/onError","title":"onError","description":"Method onError","sidebar":"tutorialSidebar"},"modules/commands/command-setup/command-arguments":{"id":"modules/commands/command-setup/command-arguments","title":"Setting arguments in command","description":"Evogram provides a convenient tool for retrieving the necessary data from the user for a command. At the moment, there are 4 built-in types of argument acceptance which we will explore. Let\'s also look at how to specify command arguments.","sidebar":"tutorialSidebar"},"modules/commands/command-setup/command-description":{"id":"modules/commands/command-setup/command-description","title":"Command Description Installation","description":"The command description is needed to add a command to the list of bot commands in Telegram. Evogram allows setting the command description in various languages in the settings, and then automatically installing all the commands in the bot with localization taken into account.","sidebar":"tutorialSidebar"},"modules/commands/command-setup/command-setup":{"id":"modules/commands/command-setup/command-setup","title":"Command Configuration","description":"The CommandHandler decorator is used to declare a command, add it to the command handler and specify its parameters. It uses overloading, allowing you to pass a string as an argument that will be the name of the command for activation or an object with parameters.","sidebar":"tutorialSidebar"},"modules/commands/commands":{"id":"modules/commands/commands","title":"Commands Module","description":"This module allows you to create bot commands and add them to processing. It allows automatically requesting the required arguments for your work, registering commands in the bot through the Telegram API.","sidebar":"tutorialSidebar"},"modules/questions/questions":{"id":"modules/questions/questions","title":"Questions Module","description":"The Questions module is designed to capture messages in Telegram and pass them to a callback function. This allows you to easily implement application logic based on user messages. This module is also used in MessageContext in the question method. The module is stored in an Evogram instance in the modules object (client.modules.questions).","sidebar":"tutorialSidebar"},"updates/updates":{"id":"updates/updates","title":"Updates","description":"Module Updates, available in the Evogram instance as updates object, allows to process updates from a Telegram bot. This module contains methods for registering update handlers and executing them when a new update is received.","sidebar":"tutorialSidebar"},"updates/updates-handler":{"id":"updates/updates-handler","title":"Update Handling","description":"The Updates module is a powerful tool for processing and responding to Telegram bot updates. It makes it easy to register handlers for different types of updates and contexts, as well as send text messages and other actions in response to received updates.","sidebar":"tutorialSidebar"},"updates/updates-list":{"id":"updates/updates-list","title":"Update List","description":"Evogram supports all events available in the Telegram API. Let\'s take a look at what events exist and what information we get.","sidebar":"tutorialSidebar"}}}')}}]);