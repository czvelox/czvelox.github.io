"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3877],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function m(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),l=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):m(m({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(a),p=r,g=c["".concat(i,".").concat(p)]||c[p]||d[p]||o;return a?n.createElement(g,m(m({ref:t},u),{},{components:a})):n.createElement(g,m({ref:t},u))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,m=new Array(o);m[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,m[1]=s;for(var l=2;l<o;l++)m[l]=a[l];return n.createElement.apply(null,m)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5621:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>m,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={},m="Setting arguments in command",s={unversionedId:"modules/commands/command-setup/command-arguments",id:"modules/commands/command-setup/command-arguments",title:"Setting arguments in command",description:"Evogram provides a convenient tool for retrieving the necessary data from the user for a command. At the moment, there are 4 built-in types of argument acceptance which we will explore. Let's also look at how to specify command arguments.",source:"@site/docs/modules/commands/command-setup/command-arguments.md",sourceDirName:"modules/commands/command-setup",slug:"/modules/commands/command-setup/command-arguments",permalink:"/evogram/docs/modules/commands/command-setup/command-arguments",draft:!1,editUrl:"https://github.com/czvelox/evogram/docs/docs/modules/commands/command-setup/command-arguments.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Command Configuration",permalink:"/evogram/docs/modules/commands/command-setup/"},next:{title:"Command Description Installation",permalink:"/evogram/docs/modules/commands/command-setup/command-description"}},i={},l=[{value:"Argument Acceptance Methods",id:"argument-acceptance-methods",level:2},{value:"Parameterized",id:"parameterized",level:3},{value:"Space",id:"space",level:3},{value:"FullText",id:"fulltext",level:3},{value:"STDIN",id:"stdin",level:3},{value:"Setting Your Argument Request Message",id:"setting-your-argument-request-message",level:4}],u={toc:l},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-arguments-in-command"},"Setting arguments in command"),(0,r.kt)("p",null,"Evogram provides a convenient tool for retrieving the necessary data from the user for a command. At the moment, there are 4 built-in types of argument acceptance which we will explore. Let's also look at how to specify command arguments."),(0,r.kt)("p",null,"To set command arguments, you need to specify ",(0,r.kt)("strong",{parentName:"p"},"args")," in CommandHandler, which is responsible for command arguments. Let's take a look at an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@CommandHandler({\n    name: "example",\n    args: {\n        // Argument acceptance method. Required parameter\n        method: "parameterized",\n        // A list of arguments to be obtained. Data is passed with the same name as specified. Required parameter\n        value: ["argument1", "argument2"]\n    }\n})\nclass ExampleCommand extends Command {\n    execute(message: MessageContext, data: ICommandExecuteData) {\n        message.send(`You specified the following parameters:\\n- argument1: ${data.args.value1}\\n- argument2: ${data.args.value2}`);\n    }\n}\n')),(0,r.kt)("p",null,"We have set a request for two arguments (",(0,r.kt)("strong",{parentName:"p"},"value1"),", ",(0,r.kt)("strong",{parentName:"p"},"value2"),") in our command, as well as specified the argument request method: ",(0,r.kt)("strong",{parentName:"p"},"parameterized"),". When executing a command with specified arguments, the bot will send us back what we specified."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The requested data can be obtained in the second argument of the execute method using the args key. All received arguments from the user are included in the object."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'result="1"',result:'"1"'},'execute(message: MessageContext, data: ICommandExecuteData) {\n    console.log(data.args["argumentName"]);\n}\n'))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Multiple argument acceptance methods can be specified by specifying an array instead of a string with a list of the required methods."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@CommandHandler({\n    name: "example",\n    args: {\n        method: ["parameterized", "stdin"],\n        value: ["argument1", "argument2"]\n    }\n})\n'))),(0,r.kt)("h2",{id:"argument-acceptance-methods"},"Argument Acceptance Methods"),(0,r.kt)("p",null,"There are 4 argument acceptance methods, each of which we will now consider."),(0,r.kt)("h3",{id:"parameterized"},"Parameterized"),(0,r.kt)("p",null,"This method allows you to accept arguments in the format ",(0,r.kt)("strong",{parentName:"p"},"--param=value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-0",metastring:'title="Using the command with this method"',title:'"Using',the:!0,command:!0,with:!0,this:!0,'method"':!0},"- User: /example --argument1=value1 --argument2=value2\n- Bot: You have provided the following parameters:\n    - argument1: value1\n    - argument2: value2\n")),(0,r.kt)("h3",{id:"space"},"Space"),(0,r.kt)("p",null,"With this method, you can get arguments that are listed with spaces."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-0",metastring:'title="Using the command with this method"',title:'"Using',the:!0,command:!0,with:!0,this:!0,'method"':!0},"- User: /example value1 value2\n- Bot: You have provided the following parameters:\n    - argument1: value1\n    - argument2: value2\n")),(0,r.kt)("h3",{id:"fulltext"},"FullText"),(0,r.kt)("p",null,"The simplest method of accepting an argument. It only accepts one argument, which is the entire string that comes after the command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-0",metastring:'title="Using the command with this method"',title:'"Using',the:!0,command:!0,with:!0,this:!0,'method"':!0},"- User: /example here goes the text, which is one argument\n- Bot: You have provided the following parameters:\n    - argument1: here goes the text, which is one argument\n")),(0,r.kt)("h3",{id:"stdin"},"STDIN"),(0,r.kt)("p",null,"When the user enters a command, they do not need to specify certain arguments after the name. Your bot itself will ask for all the necessary arguments according to the list and then execute the commands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-0",metastring:'title="Using the command with this method"',title:'"Using',the:!0,command:!0,with:!0,this:!0,'method"':!0},'- User: /example\n- Bot: The "argument1" parameter is required for the command to work. Send the value in the following message\n- User: value1\n- Bot: The "argument2" parameter is required for the command to work. Send the value in the following message\n- User: value2\n- Bot: You have provided the following parameters:\n    - argument1: value1\n    - argument2: value2\n')),(0,r.kt)("h4",{id:"setting-your-argument-request-message"},"Setting Your Argument Request Message"),(0,r.kt)("p",null,"You can set your own text message by passing an array instead of a string, consisting of the argument name and its additional parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@CommandHandler({\n    name: "example",\n    args: {\n        method: "stdin",\n        value: [["argument1", { question: "What value would you like to pass?" }]]\n    }\n})\n')),(0,r.kt)("p",null,"At the moment, you can only specify ",(0,r.kt)("strong",{parentName:"p"},"question"),", which changes the argument request text."),(0,r.kt)("p",null,"With this setting, the command call will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- User: /example\n- Bot: What value would you like to pass?\n- User: value1\n- Bot: You have provided the following parameters:\n    - argument1: value1\n")))}d.isMDXComponent=!0}}]);